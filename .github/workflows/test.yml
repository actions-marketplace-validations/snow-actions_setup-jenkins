name: Test

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  test-mount:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-20.04, ubuntu-18.04 ]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v3
      - uses: ./
        with:
          jenkins_home: test-resources/jenkins_home
      - run: curl $JENKINS_URL

      # Environment variables
      - run: test -n "$JENKINS_HOME"
      - run: test -n "$JENKINS_VERSION"
      - run: test "$JENKINS_URL" = "http://localhost:8080"
      - run: test -n "$COMPOSE_FILE"

      # Remote Access API
      # https://www.jenkins.io/doc/book/using/remote-access-api/
      - run: |
          crumb=$(curl -sS -c cookie $JENKINS_URL/crumbIssuer/api/json)
          echo "CRUMB_HEADER=$(echo $crumb | jq -r '.crumbRequestField'): $(echo $crumb | jq -r '.crumb')" >> $GITHUB_ENV
      - run: test $(curl -sS -X POST -H "${CRUMB_HEADER}" -b cookie $JENKINS_URL/api/json | jq '.jobs | length') -eq 2
      - run: curl -sS -X POST -H "${CRUMB_HEADER}" -b cookie $JENKINS_URL/job/job-1/build

      # Jenkins CLI
      # https://www.jenkins.io/doc/book/managing/cli/
      - run: wget $JENKINS_URL/jnlpJars/jenkins-cli.jar
      - run: java -jar jenkins-cli.jar -webSocket help
      - run: java -jar jenkins-cli.jar -webSocket list-plugins
      - run: java -jar jenkins-cli.jar -webSocket list-jobs
      - run: java -jar jenkins-cli.jar -webSocket build job-1 -f -v
      - run: java -jar jenkins-cli.jar -webSocket build job-2 -f -v -p param_1=p1

      # Access Jenkins container
      # https://github.com/jenkinsci/docker
      - run: docker compose ps
      - run: docker compose run --rm jenkins --version
      - run: docker compose exec jenkins jenkins-plugin-cli --list

  test-mount-default:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-20.04, ubuntu-18.04 ]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v3
      - uses: ./
      - run: curl $JENKINS_URL

      # Environment variables
      - run: test "$JENKINS_HOME" = "$RUNNER_TEMP/jenkins_home"
      - run: test -n "$JENKINS_VERSION"
      - run: test "$JENKINS_URL" = "http://localhost:8080"
      - run: test -n "$COMPOSE_FILE"

      # Remote Access API
      # https://www.jenkins.io/doc/book/using/remote-access-api/
      - run: |
          crumb=$(curl -sS -c cookie $JENKINS_URL/crumbIssuer/api/json)
          echo "CRUMB_HEADER=$(echo $crumb | jq -r '.crumbRequestField'): $(echo $crumb | jq -r '.crumb')" >> $GITHUB_ENV
      - run: test $(curl -sS -X POST -H "${CRUMB_HEADER}" -b cookie $JENKINS_URL/api/json | jq '.jobs | length') -eq 0

      # Jenkins CLI
      # https://www.jenkins.io/doc/book/managing/cli/
      - run: wget $JENKINS_URL/jnlpJars/jenkins-cli.jar
      - run: java -jar jenkins-cli.jar -webSocket help
      - run: java -jar jenkins-cli.jar -webSocket list-plugins
      - run: java -jar jenkins-cli.jar -webSocket list-jobs
      - run: java -jar jenkins-cli.jar -webSocket create-job job-1 < test-resources/jenkins_home/jobs/job-1/config.xml
      - run: java -jar jenkins-cli.jar -webSocket create-job job-2 < test-resources/jenkins_home/jobs/job-2/config.xml
      - run: java -jar jenkins-cli.jar -webSocket list-jobs
      - run: java -jar jenkins-cli.jar -webSocket build job-1 -f -v
      - run: java -jar jenkins-cli.jar -webSocket build job-2 -f -v -p param_1=p1

  test-no-mount:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-20.04, ubuntu-18.04 ]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v3
      - uses: ./
        with:
          jenkins_home: ''
      - run: curl $JENKINS_URL

      # Environment variables
      - run: test "$JENKINS_HOME" = ""
      - run: test -n "$JENKINS_VERSION"
      - run: test "$JENKINS_URL" = "http://localhost:8080"
      - run: test -n "$COMPOSE_FILE"

      # Remote Access API
      # https://www.jenkins.io/doc/book/using/remote-access-api/
      - run: |
          crumb=$(curl -sS -c cookie $JENKINS_URL/crumbIssuer/api/json)
          echo "CRUMB_HEADER=$(echo $crumb | jq -r '.crumbRequestField'): $(echo $crumb | jq -r '.crumb')" >> $GITHUB_ENV
      - run: test $(curl -sS -X POST -H "${CRUMB_HEADER}" -b cookie $JENKINS_URL/api/json | jq '.jobs | length') -eq 0

      # Jenkins CLI
      # https://www.jenkins.io/doc/book/managing/cli/
      - run: wget $JENKINS_URL/jnlpJars/jenkins-cli.jar
      - run: java -jar jenkins-cli.jar -webSocket help
      - run: java -jar jenkins-cli.jar -webSocket list-plugins
      - run: java -jar jenkins-cli.jar -webSocket list-jobs
      - run: java -jar jenkins-cli.jar -webSocket create-job job-1 < test-resources/jenkins_home/jobs/job-1/config.xml
      - run: java -jar jenkins-cli.jar -webSocket create-job job-2 < test-resources/jenkins_home/jobs/job-2/config.xml
      - run: java -jar jenkins-cli.jar -webSocket list-jobs
      - run: java -jar jenkins-cli.jar -webSocket build job-1 -f -v
      - run: java -jar jenkins-cli.jar -webSocket build job-2 -f -v -p param_1=p1

  test-jcasc:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-20.04, ubuntu-18.04 ]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v3
      - run: mkdir -p $RUNNER_TEMP/jenkins_home/
      - run: cp test-resources/jenkins.yaml $RUNNER_TEMP/jenkins_home/
      - uses: ./
      - run: curl $JENKINS_URL
      - run: ls -la $JENKINS_HOME

      # Environment variables
      - run: test "$JENKINS_HOME" = "$RUNNER_TEMP/jenkins_home"
      - run: test -n "$JENKINS_VERSION"
      - run: test "$JENKINS_URL" = "http://localhost:8080"
      - run: test -n "$COMPOSE_FILE"

      # Jenkins container
      - run: docker compose exec jenkins printenv
      - run: docker compose exec jenkins jenkins-plugin-cli --list

      # Remote Access API
      - run: |
          crumb=$(curl -sS -c cookie $JENKINS_URL/crumbIssuer/api/json)
          echo "CRUMB_HEADER=$(echo $crumb | jq -r '.crumbRequestField'): $(echo $crumb | jq -r '.crumb')" >> $GITHUB_ENV
      - run: test $(curl -sS -X POST -H "${CRUMB_HEADER}" -b cookie $JENKINS_URL/api/json | jq '.jobs | length') -eq 2

      # Jenkins CLI
      - run: wget $JENKINS_URL/jnlpJars/jenkins-cli.jar
      - run: java -jar jenkins-cli.jar -webSocket list-plugins
      - run: java -jar jenkins-cli.jar -webSocket list-jobs
      - run: java -jar jenkins-cli.jar -webSocket create-job job-jcasc < test-resources/jobs/job-jcasc/config.xml
      - run: java -jar jenkins-cli.jar -webSocket build job-jcasc -f -v

  test-jcasc-with-secrets:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-20.04, ubuntu-18.04 ]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v3
      - run: mkdir -p $RUNNER_TEMP/jenkins_home/
      - run: cp test-resources/jenkins.yaml $RUNNER_TEMP/jenkins_home/
      - run: echo "SECRET_TEXT=${{ secrets.SECRET_TEXT }}" >> container.env
      - uses: ./
        with:
          env_file: container.env
      - run: curl $JENKINS_URL
      - run: ls -la $JENKINS_HOME

      # Environment variables
      - run: test "$JENKINS_HOME" = "$RUNNER_TEMP/jenkins_home"
      - run: test -n "$JENKINS_VERSION"
      - run: test "$JENKINS_URL" = "http://localhost:8080"
      - run: test -n "$COMPOSE_FILE"

      # Jenkins container
      - run: test "$(docker compose exec jenkins printenv SECRET_TEXT)" = "${{ secrets.SECRET_TEXT }}"

      # Jenkins CLI
      - run: wget $JENKINS_URL/jnlpJars/jenkins-cli.jar
      - run: java -jar jenkins-cli.jar -webSocket list-jobs
      - run: java -jar jenkins-cli.jar -webSocket build job-dsl-plugin-script -f -v

  test-plugins:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-20.04, ubuntu-18.04 ]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v3
      - uses: ./
        with:
          plugins: ''
      - run: wget $JENKINS_URL/jnlpJars/jenkins-cli.jar
      - run: java -jar jenkins-cli.jar -webSocket list-plugins
      - run: test $(java -jar jenkins-cli.jar -webSocket list-plugins | wc -l) -eq 0
      - run: docker compose down
      - uses: ./
        with:
          plugins: |
            timestamper
            git
      - run: java -jar jenkins-cli.jar -webSocket list-plugins
      - run: test $(java -jar jenkins-cli.jar -webSocket list-plugins | wc -l) -eq 2

  test-passing:
    needs: [ test-mount, test-no-mount, test-jcasc, test-jcasc-with-secrets, test-plugins ]
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - run: echo "All tests have passed."
